name: 'publish'
on:
  push:
    branches:
      - release-test

jobs:
  publish:
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-2019, macos-11, ubuntu-20.04]
        # platform: [windows-2019, macos-11]
    env:
      MACOSX_DEPLOYMENT_TARGET: 10.13

    permissions:
      contents: write
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup for macOS code signing
        uses: matthme/import-codesign-certs
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 18

      - name: Retrieve version
        run: |
          echo "Retrieved App version: $(node -p -e "require('./package.json').version")"
          echo "APP_VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_OUTPUT
        id: version
        shell: bash

      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          override: true
          toolchain: stable

      - name: install Go stable
        uses: actions/setup-go@v4
        with:
          go-version: 'stable'

      - name: build rust-utils
        run: yarn setup

      - name: install app dependencies
        run: yarn

      - name: install default apps
        run: |
          mkdir resources/default-apps
          yarn fetch:default-apps

      - name: setup binaries (Windows only)
        if: matrix.platform == 'windows-2019'
        run: |
          mkdir resources/bins

          # cargo install --version 0.3.0 lair_keystore
          # $LkPath = Get-Command lair-keystore | Select-Object -ExpandProperty Definition
          # Copy-Item $LkPath -Destination resources/bins/lair-keystore-v0.3.0.exe

          curl -L --output resources/bins/lair-keystore-v0.3.0.exe https://github.com/matthme/launcher-electron/releases/download/lair-binaries-v0.3.0/lair-keystore-v0.3.0-x86_64-pc-windows-msvc.exe

          # cargo install holochain --version 0.2.3 --locked --features sqlite-encrypted
          # $HcPath = Get-Command holochain | Select-Object -ExpandProperty Definition
          # Copy-Item $HcPath -Destination resources/bins/holochain-v0.2.3.exe

          curl -L --output resources/bins/holochain-v0.2.3.exe https://github.com/matthme/launcher-electron/releases/download/holochain-binaries-v0.2.3/holochain-v0.2.3-x86_64-pc-windows-msvc.exe

          # NEW_VERSION: install new holochain version and copy its binary to the tauri path

      - name: setup binaries (macos only)
        if: matrix.platform == 'macos-11'
        run: |
          mkdir resources/bins

          # cargo install --version 0.3.0 lair_keystore
          # LAIR_PATH=$(which lair-keystore)
          # cp $LAIR_PATH resources/bins/lair-keystore-v0.3.0

          curl -L --output resources/bins/lair-keystore-v0.3.0 https://github.com/matthme/launcher-electron/releases/download/lair-binaries-v0.3.0/lair-keystore-v0.3.0-x86_64-apple-darwin
          chmod +x ./resources/bins/lair-keystore-v0.3.0

          # cargo install holochain --version 0.2.3 --locked --features sqlite-encrypted
          # HOLOCHAIN_PATH=$(which holochain)
          # cp $HOLOCHAIN_PATH resources/bins/holochain-v0.2.3

          curl -L --output resources/bins/holochain-v0.2.3 https://github.com/matthme/launcher-electron/releases/download/holochain-binaries-v0.2.3/holochain-v0.2.3-x86_64-apple-darwin
          chmod +x ./resources/bins/holochain-v0.2.3

          # NEW_VERSION: install new holochain version and copy its binary to the tauri path

      - name: setup binaries (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          mkdir resources/bins

          # cargo install --version 0.3.0 lair_keystore
          # LAIR_PATH=$(which lair-keystore)
          # cp $LAIR_PATH resources/bins/lair-keystore-v0.3.0

          curl -L --output resources/bins/lair-keystore-v0.3.0 https://github.com/matthme/launcher-electron/releases/download/lair-binaries-v0.3.0/lair-keystore-v0.3.0-x86_64-unknown-linux-gnu
          chmod +x ./resources/bins/lair-keystore-v0.3.0

          # cargo install holochain --version 0.2.3 --locked --features sqlite-encrypted
          # HOLOCHAIN_PATH=$(which holochain)
          # cp $HOLOCHAIN_PATH resources/bins/holochain-v0.2.3

          curl -L --output resources/bins/holochain-v0.2.3 https://github.com/matthme/launcher-electron/releases/download/holochain-binaries-v0.2.3/holochain-v0.2.3-x86_64-unknown-linux-gnu
          chmod +x ./resources/bins/holochain-v0.2.3

          # NEW_VERSION: install new holochain version and copy its binary to the tauri path

      - id: create-release
        uses: ncipollo/release-action@v1
        with:
          body: 'See assets below to download and install this version.'
          name: Holochain Launcher Electron (Prototype) v${{ steps.version.outputs.APP_VERSION }}
          tag: launcher-prototype-v${{ steps.version.outputs.APP_VERSION }}
          prerelease: true
          skipIfReleaseExists: true

      - name: build and upload the app (macOS)
        if: matrix.platform == 'macos-11'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_DEV_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DEBUG: electron-osx-sign*,electron-notarize*
        run: |
          yarn build:mac
          ls dist
          gh release upload "launcher-prototype-v${{ steps.version.outputs.APP_VERSION }}" "dist/holochain-launcher-electron-0.0.2.dmg" --clobber

      - name: build and upload the app (Linux)
        if: matrix.platform == 'ubuntu-20.04'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn build:linux
          ls dist
          gh release upload "launcher-prototype-v${{ steps.version.outputs.APP_VERSION }}" "dist/holochain-launcher-electron-0.0.2.AppImage" --clobber

      - name: build and upload the app (Windows)
        if: matrix.platform == 'windows-2019'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          yarn build:win
          ls dist
          gh release upload "launcher-prototype-v${{ steps.version.outputs.APP_VERSION }}" "dist/holochain-launcher-electron-0.0.2-setup.exe" --clobber
